// Generated by CoffeeScript 1.7.1
(function() {
  var $add, $filterInput, $main, addTag, addTask, doneTasks, editableArea, filterValue, filteredDoneTasks, notDoneTasks, tagList, taskList, taskSection, tasks;

  $main = $('#main');

  window.tasks = tasks = new RObject([
    {
      title: 'Get groceries',
      done: false,
      tags: ['bbq', 'aad']
    }, {
      title: 'Wash car',
      done: false,
      tags: []
    }, {
      title: 'Make less lists',
      done: false,
      tags: []
    }
  ]);

  window.filterValue = filterValue = new RObject('');

  window.doneTasks = doneTasks = tasks.filter(function(task) {
    return task.prop('done');
  });

  window.filteredDoneTasks = filteredDoneTasks = doneTasks.filter(function(task) {
    return task.prop('title').indexOf(filterValue).is(new RObject(-1)).inverse();
  });

  window.notDoneTasks = notDoneTasks = tasks.filter(function(task) {
    return task.prop('done').inverse();
  });

  $add = $('<button>', {
    html: 'Add'
  });

  $add.click(function() {
    return tasks.push(new RObject({
      title: 'new task',
      done: false,
      tags: []
    }));
  });

  $filterInput = $('<input>');

  $filterInput.on('change keyup', function() {
    return filterValue.set($filterInput.val());
  });

  addTag = function(tag) {
    var $edit, $el, $label;
    $el = $('<span>', {
      "class": 'tag'
    });
    $label = $('<span>');
    $edit = $('<button>', {
      "class": 'delete',
      html: 'X'
    });
    editableArea($label, tag);
    $el.append(' ', $label, $edit);
    return $el;
  };

  tagList = function(tags) {
    var $el, $tags, tagViews;
    $el = $('<nav>', {
      "class": 'tagList'
    });
    $tags = $('<div>', {
      "class": 'tagsContainer'
    });
    $el.append($tags);
    tagViews = tags.map(addTag);
    tagViews.subscribe(function(tag, _arg) {
      var $tag, index;
      index = _arg.index;
      $tag = tag.value();
      if (index === 0) {
        return $tags.prepend($tag);
      } else {
        return $tag.insertAfter($tags.children().eq(index - 1));
      }
    });
    tagViews.on('remove', function(views, _arg) {
      var index, view, _i, _len, _results;
      index = _arg.index;
      _results = [];
      for (_i = 0, _len = views.length; _i < _len; _i++) {
        view = views[_i];
        _results.push($tags.children().eq(index).remove());
      }
      return _results;
    });
    return $el;
  };

  editableArea = function($el, model) {
    $el.attr('contenteditable', true);
    $el.keydown(function(e) {
      if (e.keyCode === 13) {
        e.preventDefault();
        return $el.blur();
      }
    });
    $el.keyup(function(e) {
      return model.set($el.text());
    });
    return model.watch(function(value) {
      if ($el.text() !== value) {
        return $el.text(value);
      }
    });
  };

  addTask = function(task) {
    var $done, $el, $label, $tags;
    $el = $('<article>', {
      "class": 'task'
    });
    $done = $('<input type="checkbox">');
    $label = $('<span>');
    editableArea($label, task.prop('title'));
    $done.on('change', function() {
      var checked;
      checked = $done.is(':checked');
      return task.prop('done').set(!!checked);
    });
    $tags = tagList(task.prop('tags'));
    $el.append($done, $label, $tags);
    task.prop('done').watch(function(value) {
      return $done.attr('checked', !!value);
    });
    return $el;
  };

  taskList = function(tasks, $parent) {
    var views;
    views = tasks.map(addTask);
    views.subscribe(function(task, _arg) {
      var $task, index;
      index = _arg.index;
      $task = task.value();
      if (index === 0) {
        return $parent.prepend($task);
      } else {
        return $task.insertAfter($parent.children().eq(index - 1));
      }
    });
    return views.on('remove', function(views, _arg) {
      var index, view, _i, _len, _results;
      index = _arg.index;
      _results = [];
      for (_i = 0, _len = views.length; _i < _len; _i++) {
        view = views[_i];
        _results.push($parent.children().eq(index).remove());
      }
      return _results;
    });
  };

  taskSection = function(label, tasks) {
    var $bottom, $el, $label, $tasks, $total, chars, empty, length;
    $el = $('<section>', {
      "class": 'taskSection'
    });
    $label = $('<div>', {
      html: label
    });
    $total = $('<span>');
    $bottom = $('<div>');
    $tasks = $('<section>');
    $label.append($total);
    $el.append($label, $tasks, $bottom);
    length = tasks.length();
    empty = tasks.length().is(new RObject(0));
    chars = new RObject(0);
    console.log(chars);
    chars.watch(function(value) {
      return $bottom.text("(" + value + ")");
    });
    length.watch(function(value) {
      return $total.text(" (" + value + ")");
    });
    empty.watch(function(value) {
      return $el.toggleClass('empty', !!value);
    });
    taskList(tasks, $tasks);
    return $el;
  };

  $main.append($add);

  $main.append(taskSection('All', tasks));

  $main.append(taskSection('To Do', notDoneTasks));

  $main.append(taskSection('Done', doneTasks));

  $main.append($filterInput);

  $main.append(taskSection('Search Completed', doneTasks));

}).call(this);
