// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  (function() {
    var EventEmitter, factory, id;
    id = 0;
    factory = function(EventEmitter) {
      var RObject;
      RObject = (function(_super) {
        __extends(RObject, _super);

        function RObject(val, opts) {
          if (opts == null) {
            opts = {};
          }
          this._emitChange = __bind(this._emitChange, this);
          this._rCache = [];
          this._ats = [];
          this._props = {};
          this._id = id++;
          this.set(val);
        }

        RObject.prototype.value = function() {
          if (this._val instanceof RObject) {
            return this._val.value();
          } else {
            this._sync();
            return this._val;
          }
        };

        RObject.prototype.refValue = function() {
          this._sync();
          return this._val;
        };

        RObject.prototype._sync = function() {
          var i, item, name, _i, _len, _ref, _ref1, _results, _results1;
          switch (this._type) {
            case 'array':
              _ref = this._val;
              _results = [];
              for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                item = _ref[i];
                if (this._rCache[i] != null) {
                  _results.push(this._val[i] = this._rCache[i].value());
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
              break;
            case 'object':
              _ref1 = this._val;
              _results1 = [];
              for (name in _ref1) {
                if (!__hasProp.call(_ref1, name)) continue;
                if (this._props[name] != null) {
                  _results1.push(this._val[name] = this._props[name].value());
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
          }
        };

        RObject.prototype.type = function() {
          return this._rtype || (this._rtype = new RObject(this._type === 'proxy' ? this._val.type() : this._type));
        };

        RObject.prototype.refType = function() {
          return this._rRefType || (this._rRefType = new RObject(this._type));
        };

        RObject.prototype.length = function() {
          var _ref;
          return this._rlength || (this._rlength = new RObject(this._val instanceof RObject ? this._val.length() : (_ref = this._val) != null ? _ref.length : void 0));
        };

        RObject.prototype.refSet = function(val) {
          var i, name, previousType, previousValue, prop, value, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
          if (this === val) {
            throw new Error("bad (refSet)");
          }
          if (val === void 0) {
            val = null;
          }
          if (this._val === val) {
            return this;
          }
          previousValue = this._val;
          previousType = this._type;
          this._val = val;
          if (previousType === 'proxy') {
            previousValue.off('change', this._emitChange);
          }
          this._rCache = [];
          this._type = RObject.typeFromNative(this._val);
          if ((_ref = this._rRefType) != null) {
            _ref.set(this._type);
          }
          if ((_ref1 = this._rtype) != null) {
            _ref1.set(this._type === 'proxy' ? this._val.type() : this._type);
          }
          if ((_ref2 = this._rlength) != null) {
            _ref2.refSet((function() {
              switch (this._type) {
                case 'array':
                case 'string':
                  return this._val.length;
                case 'proxy':
                  return this._val.length();
                default:
                  return null;
              }
            }).call(this));
          }
          switch (this._type) {
            case 'array':
              _ref3 = this._val;
              for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
                value = _ref3[i];
                if (this._rCache[i]) {
                  this._rCache[i].set(value);
                } else if (value instanceof RObject) {
                  this._rCache[i] = value;
                }
              }
              this._refreshAts();
              break;
            case 'object':
              _ref4 = this._val;
              for (name in _ref4) {
                if (!__hasProp.call(_ref4, name)) continue;
                value = _ref4[name];
                if (this._props[name]) {
                  this._props[name].set(value);
                } else if (value instanceof RObject) {
                  this._props[name] = value;
                }
              }
              break;
            case 'proxy':
              this._val.on('change', this._emitChange);
          }
          switch (previousType) {
            case 'object':
              _ref5 = this._props;
              for (name in _ref5) {
                prop = _ref5[name];
                if (((_ref6 = this._val) != null ? _ref6[name] : void 0) == null) {
                  prop.set(null);
                }
              }
              break;
            case 'array':
              this._refreshAts();
          }
          this.emit('change');
          return this;
        };

        RObject.prototype._emitChange = function() {
          return this.emit('change');
        };

        RObject.prototype.set = function(val) {
          if (this === val) {
            throw new Error("bad");
          }
          if (this._type === 'proxy') {
            return this._val.set(val);
          }
          return this.refSet(val);
        };

        RObject.prototype._refreshAts = function() {
          var at, i, _i, _j, _len, _ref, _ref1, _results, _results1;
          switch (this._type) {
            case 'array':
              _results = [];
              for (i = _i = 0, _ref = this._val.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
                if (this._ats[i]) {
                  _results.push(this._ats[i].refSet(this._rCache[i] || this._val[i]));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
              break;
            default:
              _ref1 = this._ats;
              _results1 = [];
              for (i = _j = 0, _len = _ref1.length; _j < _len; i = ++_j) {
                at = _ref1[i];
                if (at) {
                  _results1.push(at.refSet(null));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
          }
        };

        RObject.prototype.prop = function(key) {
          var child, update;
          child = new RObject();
          update = (function(_this) {
            return function() {
              var keyVal, _base, _ref;
              if (_this._type === 'proxy') {
                return child.refSet(_this._val.prop(key));
              }
              keyVal = key instanceof RObject ? key.value() : key;
              if (typeof keyVal === 'string') {
                (_base = _this._props)[keyVal] || (_base[keyVal] = new RObject((_ref = _this._val) != null ? _ref[keyVal] : void 0));
                if (_this._type === 'object' && _this._val[keyVal] === void 0) {
                  _this._val[keyVal] = void 0;
                }
                switch (_this._type) {
                  case 'object':
                    return child.refSet(_this._props[keyVal]);
                  default:
                    return child.refSet(null);
                }
              } else {
                return child.refSet(null);
              }
            };
          })(this);
          this.on('change', update);
          if (key instanceof RObject) {
            key.on('change', update);
          }
          update();
          return child;
        };

        RObject.prototype.at = function(index) {
          var child, update;
          child = new RObject();
          update = (function(_this) {
            return function() {
              var indexVal, val, _base, _base1;
              if (_this._type === 'proxy') {
                return child.refSet(_this._val.at(index));
              }
              indexVal = index instanceof RObject ? index.value() : index;
              val = _this._type === 'array' ? _this._val[indexVal] : null;
              if (typeof indexVal === 'number') {
                (_base = _this._rCache)[indexVal] || (_base[indexVal] = new RObject());
                if (_this._rCache[indexVal] !== val) {
                  _this._rCache[indexVal].refSet(val);
                }
                (_base1 = _this._ats)[indexVal] || (_base1[indexVal] = new RObject(_this._rCache[indexVal]));
              }
              switch (_this._type) {
                case 'array':
                  _this._val[indexVal] = _this._rCache[indexVal];
                  return child.refSet(_this._ats[indexVal]);
                default:
                  return child.refSet(null);
              }
            };
          })(this);
          this.on('change', update);
          if (index instanceof RObject) {
            index.on('change', update);
          }
          update();
          return child;
        };

        RObject.prototype.splice = function() {
          var i, index, item, itemsToAdd, numToRemove, rItemsToAdd, rRemoved, removeHangover, removed, requestedNumToRemove, _base, _i, _ref, _ref1, _ref2, _ref3;
          index = arguments[0], requestedNumToRemove = arguments[1], itemsToAdd = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          switch (this._type) {
            case 'array':
              removeHangover = index + requestedNumToRemove - this._val.length;
              numToRemove = removeHangover > 0 ? requestedNumToRemove - removeHangover : requestedNumToRemove;
              rItemsToAdd = (function() {
                var _i, _len, _results;
                _results = [];
                for (i = _i = 0, _len = itemsToAdd.length; _i < _len; i = ++_i) {
                  item = itemsToAdd[i];
                  if (item instanceof RObject) {
                    _results.push(item);
                  } else {
                    _results.push(new RObject(item));
                  }
                }
                return _results;
              })();
              if ((_base = this._rCache)[index] == null) {
                _base[index] = void 0;
              }
              rRemoved = (_ref = this._rCache).splice.apply(_ref, [index, numToRemove].concat(__slice.call(rItemsToAdd)));
              if (numToRemove) {
                for (i = _i = 0, _ref1 = numToRemove - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
                  rRemoved[i] || (rRemoved[i] = new RObject(this._val[index + i]));
                }
              }
              removed = (_ref2 = this._val).splice.apply(_ref2, [index, numToRemove].concat(__slice.call(itemsToAdd)));
              if ((_ref3 = this._rlength) != null) {
                _ref3.set(this._val.length);
              }
              this._refreshAts();
              if (rRemoved.length) {
                this.emit('remove', rRemoved, {
                  index: index
                });
              }
              if (itemsToAdd.length) {
                this.emit('add', rItemsToAdd, {
                  index: index
                });
              }
              return removed;
            case 'proxy':
              return this._val.splice.apply(this._val, arguments);
            default:
              return this;
          }
        };

        RObject.prototype.subscribe = function(handler) {
          var update;
          update = (function(_this) {
            return function() {
              var index, item, _i, _len, _ref, _results;
              _this._vivifyAll();
              if (_this._type === 'array') {
                _ref = _this._rCache;
                _results = [];
                for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                  item = _ref[index];
                  _results.push(handler(item, {
                    index: index
                  }));
                }
                return _results;
              }
            };
          })(this);
          this.on('add', function(added, _arg) {
            var i, index, item, _i, _len, _results;
            index = _arg.index;
            _results = [];
            for (i = _i = 0, _len = added.length; _i < _len; i = ++_i) {
              item = added[i];
              _results.push(handler(item, {
                index: index + i
              }));
            }
            return _results;
          });
          this.on('change', update);
          return update();
        };

        RObject.prototype._vivifyAll = function() {
          if (this._type !== 'array' || !this._val.length) {
            return;
          }
          return this._vivifySpan(0, this._val.length - 1);
        };

        RObject.prototype._vivifySpan = function(index, howMany) {
          var i, _base, _i;
          if (this._type !== 'array') {
            return;
          }
          for (i = _i = index; index <= howMany ? _i <= howMany : _i >= howMany; i = index <= howMany ? ++_i : --_i) {
            (_base = this._rCache)[i] || (_base[i] = new RObject(this._val[i]));
          }
          return null;
        };

        RObject.prototype.combine = function() {
          var cb, child, handler, operand, operands, _i, _j, _len;
          operands = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), handler = arguments[_i++];
          child = new RObject();
          cb = (function(_this) {
            return function() {
              var operand, operandValues;
              operandValues = (function() {
                var _j, _len, _results;
                _results = [];
                for (_j = 0, _len = operands.length; _j < _len; _j++) {
                  operand = operands[_j];
                  _results.push(operand.value());
                }
                return _results;
              })();
              return child.set(handler.apply(null, [_this.value()].concat(__slice.call(operandValues))));
            };
          })(this);
          this.on('change', cb);
          for (_j = 0, _len = operands.length; _j < _len; _j++) {
            operand = operands[_j];
            operand.on('change', cb);
          }
          cb();
          return child;
        };

        RObject.prototype.watch = function(cb) {
          var run;
          run = (function(_this) {
            return function() {
              return cb(_this.value());
            };
          })(this);
          this.on('change', run);
          return run();
        };

        RObject.prototype.inverse = function() {
          return this.combine((function(_this) {
            return function(value) {
              switch (_this.type().value()) {
                case 'boolean':
                  return !value;
                case 'number':
                  return -value;
                default:
                  return value;
              }
            };
          })(this));
        };

        RObject.prototype.push = function(items, opts) {
          return this.splice(this._val.length, 0, items);
        };

        RObject.prototype.filter = function(passFail) {
          var addToChild, change, child, passChangeHandlers, removeFromChild;
          child = new RObject();
          passChangeHandlers = [];
          addToChild = (function(_this) {
            return function(items, _arg) {
              var childIndex, i, index, item, parentIndex, passFailChange, passes, passing, _viaPassFail;
              index = _arg.index, _viaPassFail = _arg._viaPassFail;
              parentIndex = index - 1;
              while ((childIndex = child.value().indexOf(_this._val[parentIndex])) === -1) {
                parentIndex--;
                if (parentIndex < 0) {
                  break;
                }
              }
              passing = (function() {
                var _i, _len, _results;
                _results = [];
                for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
                  item = items[i];
                  passes = passFail(item);
                  passFailChange = (function(_this) {
                    return function(item, passes) {
                      return function() {
                        index = _this._rCache.indexOf(item);
                        if (passes.value()) {
                          return addToChild([item], {
                            index: index,
                            _viaPassFail: true
                          });
                        } else {
                          return removeFromChild([item], {
                            index: index,
                            _viaPassFail: true
                          });
                        }
                      };
                    };
                  })(this)(item, passes);
                  if (!_viaPassFail) {
                    passes.on('change', passFailChange);
                  }
                  passChangeHandlers.splice(index + i, 0, [passes, passFailChange]);
                  if (passes.value()) {
                    _results.push(item);
                  } else {
                    continue;
                  }
                }
                return _results;
              }).call(_this);
              if (passing.length) {
                return child.splice.apply(child, [childIndex + 1, 0].concat(__slice.call(passing)));
              }
            };
          })(this);
          removeFromChild = (function(_this) {
            return function(items, _arg) {
              var childIndex, i, index, item, match, passFailChange, passes, removedIndex, _i, _len, _ref, _results, _viaPassFail;
              index = _arg.index, _viaPassFail = _arg._viaPassFail;
              if (!_viaPassFail) {
                for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
                  item = items[i];
                  _ref = passChangeHandlers[index + i], passes = _ref[0], passFailChange = _ref[1];
                  passes.off('change', passFailChange);
                }
                passChangeHandlers.splice(index + i, items.length);
              }
              removedIndex = 0;
              while ((childIndex = child._rCache.indexOf(items[removedIndex])) === -1) {
                removedIndex++;
                if (removedIndex >= items.length) {
                  return;
                }
              }
              _results = [];
              while (removedIndex < items.length) {
                match = items[removedIndex] === child._rCache[childIndex];
                if (match) {
                  child.splice(childIndex, 1);
                }
                _results.push(removedIndex++);
              }
              return _results;
            };
          })(this);
          change = (function(_this) {
            return function() {
              var passChangeHandler;
              while (passChangeHandler = passChangeHandlers.pop()) {
                passChangeHandler[0].off('change', passChangeHandler[1]);
              }
              switch (_this._type) {
                case 'array':
                  child.set([]);
                  _this._vivifyAll();
                  return addToChild(_this._rCache, {
                    index: 0
                  });
                default:
                  return child.set(null);
              }
            };
          })(this);
          this.on('add', addToChild);
          this.on('remove', removeFromChild);
          this.on('change', change);
          change();
          return child;
        };

        RObject.prototype.reduce = function(reducer, initial) {
          var rereduce, result, update;
          result = new RObject();
          rereduce = (function(_this) {
            return function() {
              var i, item, prevValue, _base, _i, _len, _ref;
              prevValue = initial != null ? initial : new RObject();
              _ref = _this._val;
              for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                item = _ref[i];
                prevValue = reducer(prevValue, (_base = _this._rCache)[i] || (_base[i] = new RObject(_this._val[i])));
              }
              return result.refSet(prevValue);
            };
          })(this);
          update = (function(_this) {
            return function() {
              switch (_this._type) {
                case 'array':
                  return rereduce();
                default:
                  return result.refSet(initial);
              }
            };
          })(this);
          this.on('remove', rereduce);
          this.on('add', rereduce);
          this.on('change', update);
          update();
          return result;
        };

        RObject.prototype.map = function(transform) {
          var child, reset;
          child = new RObject();
          reset = (function(_this) {
            return function() {
              var i, item;
              return child.set((function() {
                var _base, _i, _len, _ref, _results;
                switch (this._type) {
                  case 'array':
                    _ref = this._val;
                    _results = [];
                    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                      item = _ref[i];
                      _results.push(transform((_base = this._rCache)[i] || (_base[i] = new RObject(this._val[i]))));
                    }
                    return _results;
                    break;
                  default:
                    return null;
                }
              }).call(_this));
            };
          })(this);
          this.on('remove', function(items, _arg) {
            var index;
            index = _arg.index;
            return child.splice(index, items.length);
          });
          this.on('add', function(items, _arg) {
            var index, item, result, transformed;
            index = _arg.index;
            transformed = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = items.length; _i < _len; _i++) {
                item = items[_i];
                result = transform(item);
                if (result instanceof RObject) {
                  _results.push(result);
                } else {
                  _results.push(new RObject(result));
                }
              }
              return _results;
            })();
            return child.splice.apply(child, [index, 0].concat(__slice.call(transformed)));
          });
          this.on('change', reset);
          reset();
          return child;
        };

        RObject.prototype.add = function(items, opts) {
          return this.combine(items, function(aVal, bVal) {
            return aVal + bVal;
          });
        };

        RObject.prototype.subtract = function(operand) {
          return this.combine(operand, function(aVal, bVal) {
            return aVal - bVal;
          });
        };

        RObject.prototype.multiply = function(operand) {
          return this.combine(operand, function(aVal, bVal) {
            return aVal * bVal;
          });
        };

        RObject.prototype.divide = function(operand) {
          return this.combine(operand, function(aVal, bVal) {
            return aVal / bVal;
          });
        };

        RObject.prototype.mod = function(operand) {
          return this.combine(operand, function(aVal, bVal) {
            return aVal % bVal;
          });
        };

        RObject.prototype.greaterThan = function(operand) {
          return this.combine(operand, function(aVal, bVal) {
            return aVal > bVal;
          });
        };

        RObject.prototype.greaterThanOrEqual = function(operand) {
          return this.combine(operand, function(aVal, bVal) {
            return aVal >= bVal;
          });
        };

        RObject.prototype.lessThan = function(operand) {
          return this.combine(operand, function(aVal, bVal) {
            return aVal < bVal;
          });
        };

        RObject.prototype.lessThanOrEqual = function(operand) {
          return this.combine(operand, function(aVal, bVal) {
            return aVal <= bVal;
          });
        };

        RObject.prototype.is = function(operand) {
          return this.combine(operand, function(aVal, bVal) {
            return aVal === bVal;
          });
        };

        RObject.prototype.concat = function(operand) {
          return this.combine(operand, function(aVal, bVal) {
            return aVal + bVal;
          });
        };

        RObject.prototype.indexOf = function(operand) {
          return this.combine(operand, (function(_this) {
            return function(aVal, bVal) {
              switch (_this.type().value()) {
                case 'string':
                  return aVal.indexOf(bVal);
                case 'array':
                  return -1;
                default:
                  return -1;
              }
            };
          })(this));
        };

        return RObject;

      })(EventEmitter);
      RObject.typeFromNative = function(object) {
        if (object === null || object === void 0) {
          return 'empty';
        } else if (object instanceof RObject) {
          return 'proxy';
        } else if (Array.isArray(object)) {
          return 'array';
        } else {
          return typeof object;
        }
      };
      return RObject;
    };
    if (typeof define === 'function' && define.amd) {
      return define(['./EventEmitter'], function(EventEmitter) {
        return factory(EventEmitter);
      });
    } else if (typeof module === 'object' && module.exports) {
      EventEmitter = require('./EventEmitter');
      return module.exports = factory(EventEmitter);
    } else {
      return window.RObject = factory(window.EventEmitter);
    }
  })();

}).call(this);
